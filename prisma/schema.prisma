generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminSettings {
  id           String   @id @default("singleton")
  featureCosts Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CreditBalance {
  id               String         @id @default(cuid())
  userId           String         @unique
  clerkUserId      String         @unique
  creditsRemaining Int            @default(100)
  lastSyncedAt     DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  User             User           @relation(fields: [userId], references: [id])
  UsageHistory     UsageHistory[]

  @@index([clerkUserId])
  @@index([creditsRemaining])
  @@index([lastSyncedAt])
  @@index([userId])
}

model CustomFont {
  id         Int      @id @default(autoincrement())
  name       String
  fontFamily String
  fileUrl    String
  projectId  Int
  uploadedBy String
  createdAt  DateTime @default(now())
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Element {
  id         Int      @id @default(autoincrement())
  name       String
  fileUrl    String
  category   String?
  projectId  Int
  uploadedBy String
  createdAt  DateTime @default(now())
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([projectId])
}

model Feature {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([workspaceId])
}

model Generation {
  id                   String           @id @default(cuid())
  status               GenerationStatus @default(PROCESSING)
  templateId           Int
  fieldValues          Json
  resultUrl            String?
  projectId            Int
  authorName           String?
  templateName         String?
  projectName          String?
  createdBy            String
  createdAt            DateTime         @default(now())
  completedAt          DateTime?
  googleDriveFileId    String?
  googleDriveBackupUrl String?
  Project              Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Template             Template         @relation(fields: [templateId], references: [id])

  @@index([createdAt])
  @@index([createdBy])
  @@index([projectId])
  @@index([status])
  @@index([templateId])
}

model Logo {
  id         Int      @id @default(autoincrement())
  name       String
  fileUrl    String
  projectId  Int
  uploadedBy String
  createdAt  DateTime @default(now())
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Plan {
  id                String   @id @default(cuid())
  clerkId           String?  @unique
  clerkName         String?
  name              String
  credits           Int
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  currency          String?
  priceMonthlyCents Int?
  priceYearlyCents  Int?
  badge             String?
  ctaLabel          String?
  ctaType           String?  @default("checkout")
  ctaUrl            String?
  description       String?
  features          Json?
  highlight         Boolean  @default(false)
  billingSource     String   @default("clerk")
  sortOrder         Int      @default(0)

  @@index([active])
}

model Project {
  id                     Int           @id @default(autoincrement())
  name                   String
  description            String?
  status                 ProjectStatus @default(ACTIVE)
  logoUrl                String?
  googleDriveFolderId    String?
  makeWebhookAnalyzeUrl  String?
  makeWebhookCreativeUrl String?
  userId                 String
  workspaceId            Int?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  googleDriveFolderName  String?
  CustomFont             CustomFont[]
  Element                Element[]
  Generation             Generation[]
  Logo                   Logo[]
  Template               Template[]

  @@index([status])
  @@index([userId])
  @@index([workspaceId])
}

model StorageObject {
  id          String    @id @default(cuid())
  userId      String
  clerkUserId String
  provider    String    @default("vercel_blob")
  url         String
  pathname    String
  name        String
  contentType String?
  size        Int
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id])

  @@index([clerkUserId])
  @@index([contentType])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([name])
  @@index([userId])
}

model SubscriptionEvent {
  id          String   @id @default(cuid())
  userId      String?
  clerkUserId String
  planKey     String?
  status      String
  eventType   String
  occurredAt  DateTime @default(now())
  metadata    Json?
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])

  @@index([clerkUserId, occurredAt])
  @@index([userId, occurredAt])
}

model Template {
  id            Int          @id @default(autoincrement())
  name          String
  type          TemplateType
  dimensions    String
  designData    Json
  dynamicFields Json         @default("[]")
  thumbnailUrl  String?
  projectId     Int
  createdBy     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Generation    Generation[]
  Project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([createdBy])
  @@index([projectId])
  @@index([type])
}

model UsageHistory {
  id              String        @id @default(cuid())
  userId          String
  creditBalanceId String
  operationType   OperationType
  creditsUsed     Int
  details         Json?
  timestamp       DateTime      @default(now())
  CreditBalance   CreditBalance @relation(fields: [creditBalanceId], references: [id])
  User            User          @relation(fields: [userId], references: [id])

  @@index([creditBalanceId])
  @@index([operationType])
  @@index([operationType, timestamp])
  @@index([timestamp])
  @@index([userId])
  @@index([userId, timestamp])
}

model User {
  id                String              @id @default(cuid())
  clerkId           String              @unique
  email             String?             @unique
  name              String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  CreditBalance     CreditBalance?
  StorageObject     StorageObject[]
  SubscriptionEvent SubscriptionEvent[]
  UsageHistory      UsageHistory[]

  @@index([createdAt])
  @@index([email])
  @@index([isActive])
  @@index([name])
}

enum GenerationStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum OperationType {
  AI_TEXT_CHAT
  AI_IMAGE_GENERATION
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TemplateType {
  STORY
  FEED
  SQUARE
}
