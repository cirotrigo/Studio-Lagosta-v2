generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminSettings {
  id           String   @id @default("singleton")
  featureCosts Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CreditBalance {
  id               String         @id @default(cuid())
  userId           String         @unique
  clerkUserId      String         @unique
  creditsRemaining Int            @default(100)
  lastSyncedAt     DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  User             User           @relation(fields: [userId], references: [id])
  UsageHistory     UsageHistory[]

  @@index([clerkUserId])
  @@index([creditsRemaining])
  @@index([lastSyncedAt])
  @@index([userId])
}

model CustomFont {
  id         Int      @id @default(autoincrement())
  name       String
  fontFamily String
  fileUrl    String
  projectId  Int
  uploadedBy String
  createdAt  DateTime @default(now())
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Element {
  id         Int      @id @default(autoincrement())
  name       String
  fileUrl    String
  category   String?
  projectId  Int
  uploadedBy String
  createdAt  DateTime @default(now())
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([projectId])
}

model Feature {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([workspaceId])
}

model Generation {
  id                   String           @id @default(cuid())
  status               GenerationStatus @default(PROCESSING)
  templateId           Int
  fieldValues          Json
  resultUrl            String?
  projectId            Int
  authorName           String?
  templateName         String?
  projectName          String?
  createdBy            String
  createdAt            DateTime         @default(now())
  completedAt          DateTime?
  googleDriveFileId    String?
  googleDriveBackupUrl String?
  Project              Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Template             Template         @relation(fields: [templateId], references: [id])
  VideoProcessingJob   VideoProcessingJob? @relation("GenerationVideoJob")

  @@index([createdAt])
  @@index([createdBy])
  @@index([projectId])
  @@index([status])
  @@index([templateId])
}

model Logo {
  id             Int      @id @default(autoincrement())
  name           String
  fileUrl        String
  projectId      Int
  uploadedBy     String
  isProjectLogo  Boolean  @default(false)
  createdAt      DateTime @default(now())
  Project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, isProjectLogo])
}

model BrandColor {
  id         Int      @id @default(autoincrement())
  name       String
  hexCode    String
  projectId  Int
  uploadedBy String
  createdAt  DateTime @default(now())
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Plan {
  id                String   @id @default(cuid())
  clerkId           String?  @unique
  clerkName         String?
  name              String
  credits           Int
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  currency          String?
  priceMonthlyCents Int?
  priceYearlyCents  Int?
  badge             String?
  ctaLabel          String?
  ctaType           String?  @default("checkout")
  ctaUrl            String?
  description       String?
  features          Json?
  highlight         Boolean  @default(false)
  billingSource     String   @default("clerk")
  sortOrder         Int      @default(0)

  @@index([active])
}

model Project {
  id                     Int                @id @default(autoincrement())
  name                   String
  description            String?
  status                 ProjectStatus      @default(ACTIVE)
  logoUrl                String?
  googleDriveFolderId    String?
  googleDriveFolderName  String?
  googleDriveImagesFolderId   String?
  googleDriveImagesFolderName String?
  googleDriveVideosFolderId   String?
  googleDriveVideosFolderName String?
  makeWebhookAnalyzeUrl  String?
  makeWebhookCreativeUrl String?
  userId                 String
  workspaceId            Int?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  BrandColor             BrandColor[]
  CustomFont             CustomFont[]
  Element                Element[]
  Generation             Generation[]
  Logo                   Logo[]
  Template               Template[]
  AIGeneratedImage       AIGeneratedImage[]
  PromptLibrary          PromptLibrary[]
  organizationProjects   OrganizationProject[]

  @@index([status])
  @@index([userId])
  @@index([workspaceId])
}

model Organization {
  id               String                     @id @default(cuid())
  clerkOrgId       String                     @unique
  name             String
  slug             String                     @unique
  imageUrl         String?
  isActive         Boolean                    @default(true)
  maxMembers       Int                        @default(5)
  maxProjects      Int                        @default(10)
  creditsPerMonth  Int                        @default(1000)
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  projects         OrganizationProject[]
  creditBalance    OrganizationCreditBalance?
  usage            OrganizationUsage[]

  @@index([clerkOrgId])
  @@index([slug])
}

model OrganizationCreditBalance {
  id             String        @id @default(cuid())
  organizationId String        @unique
  credits        Int           @default(0)
  lastRefill     DateTime?
  refillAmount   Int           @default(1000)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model OrganizationUsage {
  id             String        @id @default(cuid())
  organizationId String
  userId         String
  feature        String
  credits        Int
  metadata       Json?
  createdAt      DateTime      @default(now())
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([createdAt])
}

model OrganizationProject {
  id             String        @id @default(cuid())
  organizationId String
  projectId      Int
  sharedBy       String
  sharedAt       DateTime      @default(now())
  defaultCanEdit Boolean       @default(true)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([organizationId, projectId])
  @@index([projectId])
  @@index([organizationId])
}

model StorageObject {
  id          String    @id @default(cuid())
  userId      String
  clerkUserId String
  provider    String    @default("vercel_blob")
  url         String
  pathname    String
  name        String
  contentType String?
  size        Int
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id])

  @@index([clerkUserId])
  @@index([contentType])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([name])
  @@index([userId])
}

model SubscriptionEvent {
  id          String   @id @default(cuid())
  userId      String?
  clerkUserId String
  planKey     String?
  status      String
  eventType   String
  occurredAt  DateTime @default(now())
  metadata    Json?
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])

  @@index([clerkUserId, occurredAt])
  @@index([userId, occurredAt])
}

model Template {
  id            Int          @id @default(autoincrement())
  name          String
  type          TemplateType
  dimensions    String
  designData    Json
  dynamicFields Json         @default("[]")
  thumbnailUrl  String?
  category      String?
  tags          String[]     @default([])
  isPublic      Boolean      @default(false)
  isPremium     Boolean      @default(false)
  projectId     Int
  createdBy     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Generation    Generation[]
  Project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Page          Page[]

  @@index([createdBy])
  @@index([projectId])
  @@index([type])
  @@index([category])
  @@index([isPublic])
}

model Page {
  id         String   @id @default(cuid())
  name       String
  width      Int
  height     Int
  layers     Json     @default("[]")
  background String?
  order      Int      @default(0)
  thumbnail  String?
  templateId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([order])
}

model UsageHistory {
  id              String        @id @default(cuid())
  userId          String
  creditBalanceId String
  operationType   OperationType
  creditsUsed     Int
  details         Json?
  timestamp       DateTime      @default(now())
  CreditBalance   CreditBalance @relation(fields: [creditBalanceId], references: [id])
  User            User          @relation(fields: [userId], references: [id])

  @@index([creditBalanceId])
  @@index([operationType])
  @@index([operationType, timestamp])
  @@index([timestamp])
  @@index([userId])
  @@index([userId, timestamp])
}

model User {
  id                String              @id @default(cuid())
  clerkId           String              @unique
  email             String?             @unique
  name              String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  CreditBalance     CreditBalance?
  StorageObject     StorageObject[]
  SubscriptionEvent SubscriptionEvent[]
  UsageHistory      UsageHistory[]

  @@index([createdAt])
  @@index([email])
  @@index([isActive])
  @@index([name])
}

enum GenerationStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum OperationType {
  AI_TEXT_CHAT
  AI_IMAGE_GENERATION
  CREATIVE_DOWNLOAD
  VIDEO_EXPORT
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TemplateType {
  STORY
  FEED
  SQUARE
}

enum EntryStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum AIImageMode {
  GENERATE
  EDIT
  OUTPAINT
}

model AIGeneratedImage {
  id            String      @id @default(cuid())
  projectId     Int
  name          String
  prompt        String      @db.Text
  mode          AIImageMode
  fileUrl       String
  thumbnailUrl  String?
  width         Int
  height        Int
  aspectRatio   String
  provider      String      @default("replicate")
  model         String
  predictionId  String?
  sourceImageId String?
  createdBy     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([createdBy])
  @@index([mode])
  @@index([createdAt])
}

model KnowledgeBaseEntry {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  tags        String[]
  status      EntryStatus @default(ACTIVE)
  userId      String?
  workspaceId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chunks      KnowledgeChunk[]

  @@index([userId])
  @@index([workspaceId])
  @@index([status])
  @@map("knowledge_base_entries")
}

model KnowledgeChunk {
  id        String              @id @default(cuid())
  entryId   String
  ordinal   Int
  content   String              @db.Text
  tokens    Int?
  vectorId  String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  entry     KnowledgeBaseEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@unique([entryId, ordinal])
  @@index([entryId])
  @@map("knowledge_chunks")
}

// =============================================================================
// CMS Models - Content Management System
// =============================================================================

enum CMSPageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CMSSectionType {
  HERO
  BENTO_GRID
  FAQ
  AI_STARTER
  PRICING
  CTA
  CUSTOM
}

model CMSPage {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  path        String        @unique
  description String?       @db.Text
  status      CMSPageStatus @default(DRAFT)
  isHome      Boolean       @default(false)
  metaTitle   String?
  metaDesc    String?       @db.Text
  ogImage     String?
  publishedAt DateTime?
  createdBy   String
  updatedBy   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sections    CMSSection[]

  @@index([slug])
  @@index([path])
  @@index([status])
  @@index([isHome])
  @@index([publishedAt])
}

model CMSSection {
  id         String         @id @default(cuid())
  pageId     String
  type       CMSSectionType
  name       String
  content    Json
  order      Int            @default(0)
  isVisible  Boolean        @default(true)
  cssClasses String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  page       CMSPage        @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
  @@index([type])
  @@index([order])
}

model CMSMenu {
  id        String        @id @default(cuid())
  name      String
  slug      String        @unique
  location  String
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  items     CMSMenuItem[]

  @@index([slug])
  @@index([location])
}

model CMSMenuItem {
  id        String        @id @default(cuid())
  menuId    String
  label     String
  url       String
  target    String?       @default("_self")
  icon      String?
  order     Int           @default(0)
  parentId  String?
  isVisible Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  menu      CMSMenu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  parent    CMSMenuItem?  @relation("MenuItemChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children  CMSMenuItem[] @relation("MenuItemChildren")

  @@index([menuId])
  @@index([parentId])
  @@index([order])
}

model CMSComponent {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  type        String
  content     Json
  thumbnail   String?
  isGlobal    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([type])
  @@index([isGlobal])
}

model CMSMedia {
  id          String   @id @default(cuid())
  name        String
  filename    String
  url         String
  thumbnailUrl String?
  mimeType    String
  size        Int
  width       Int?
  height      Int?
  alt         String?
  caption     String?  @db.Text
  folder      String?
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([folder])
  @@index([mimeType])
  @@index([uploadedBy])
}

model SiteSettings {
  id          String   @id @default(cuid())

  // Brand
  siteName    String   @default("Studio Lagosta")
  shortName   String   @default("Studio Lagosta")
  description String   @db.Text

  // Logo (Icon)
  logoLight   String   @default("/logo-light.svg")
  logoDark    String   @default("/logo-dark.svg")

  // Logo Full (Complete logo with text)
  logoFullLight String?
  logoFullDark  String?

  // Icons
  favicon     String   @default("/favicon.ico")
  appleIcon   String?

  // SEO
  metaTitle   String?
  metaDesc    String?  @db.Text
  ogImage     String?
  keywords    String[] @default([])

  // Contact
  supportEmail String?

  // Social
  twitter     String?
  facebook    String?
  instagram   String?
  linkedin    String?
  github      String?

  // Analytics
  gtmId       String?
  gaId        String?
  facebookPixelId String?

  // General
  isActive    Boolean  @default(true)
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
}

model FeatureGridItem {
  id          String   @id @default(cuid())
  icon        String                // Nome do ícone Lucide (ex: "Sparkles")
  iconColor   String?               // Classe Tailwind (ex: "text-sky-500")
  title       String
  description String   @db.Text
  gridArea    String?               // CSS grid-area (ex: "md:[grid-area:1/1/2/2]")
  order       Int      @default(0)  // Ordem de exibição
  isActive    Boolean  @default(true)
  createdBy   String
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order])
  @@index([isActive])
}

model PromptLibrary {
  id        String   @id @default(cuid())
  title     String
  prompt    String   @db.Text
  category  String?
  projectId Int
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([createdBy])
}

// Global Prompts - User-level prompts (reusable across all projects)
model Prompt {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String   @db.Text
  category  String?
  tags      String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([category])
  @@index([createdAt])
}

// Video Processing Queue - Background video conversion jobs
enum VideoProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model VideoProcessingJob {
  id              String                 @id @default(cuid())
  userId          String
  clerkUserId     String
  templateId      Int
  projectId       Int

  // Job data
  status          VideoProcessingStatus  @default(PENDING)
  webmBlobUrl     String                 // Temporary WebM blob URL or storage path
  webmFileSize    Int                    // Size in bytes
  mp4ResultUrl    String?                // Final MP4 URL after conversion
  thumbnailUrl    String?                // Thumbnail URL

  // Metadata
  videoName       String
  videoDuration   Float                  // Duration in seconds
  videoWidth      Int
  videoHeight     Int
  designData      Json                   // Template design data for reference

  // Progress tracking
  progress        Int                    @default(0) // 0-100
  errorMessage    String?

  // Timestamps
  createdAt       DateTime               @default(now())
  startedAt       DateTime?
  completedAt     DateTime?

  // Credits
  creditsDeducted Boolean                @default(false)
  creditsUsed     Int                    @default(10)
  generationId    String?                @unique
  generation      Generation?            @relation("GenerationVideoJob", fields: [generationId], references: [id])

  @@index([userId])
  @@index([clerkUserId])
  @@index([status])
  @@index([createdAt])
  @@index([templateId])
  @@index([projectId])
}
