#!/bin/bash

# Script para fazer backup apenas das configura√ß√µes do banco local
# Exclui dados de usu√°rios, projetos e gera√ß√µes de teste

set -e

echo "üóÑÔ∏è  Backup de Configura√ß√µes - Studio Lagosta"
echo "==========================================="
echo ""

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Database local
LOCAL_DB="postgresql://postgres:postgres@127.0.0.1:5432/saas_template"

# Verificar se banco est√° acess√≠vel
echo "Verificando conex√£o com banco local..."
if ! psql "$LOCAL_DB" -c "SELECT 1" > /dev/null 2>&1; then
    echo -e "${RED}‚úó${NC} N√£o foi poss√≠vel conectar ao banco local"
    echo "Verifique se PostgreSQL est√° rodando em 127.0.0.1:5432"
    exit 1
fi
echo -e "${GREEN}‚úì${NC} Conectado ao banco local"
echo ""

# Criar diret√≥rio de backups
BACKUP_DIR="backups/$(date +%Y-%m-%d_%H-%M-%S)"
mkdir -p "$BACKUP_DIR"

echo "üìÅ Diret√≥rio de backup: $BACKUP_DIR"
echo ""

# 1. Backup de AdminSettings
echo "1. Exportando AdminSettings..."
pg_dump "$LOCAL_DB" \
  --table=AdminSettings \
  --data-only \
  --column-inserts \
  --no-owner \
  --no-acl \
  > "$BACKUP_DIR/admin_settings.sql"
echo -e "${GREEN}‚úì${NC} AdminSettings exportado"

# 2. Backup de Plans
echo "2. Exportando Plans..."
pg_dump "$LOCAL_DB" \
  --table=Plan \
  --data-only \
  --column-inserts \
  --no-owner \
  --no-acl \
  > "$BACKUP_DIR/plans.sql"
echo -e "${GREEN}‚úì${NC} Plans exportado"

# 3. Backup de Features (se existir)
echo "3. Exportando Features..."
if psql "$LOCAL_DB" -c "SELECT COUNT(*) FROM \"Feature\";" > /dev/null 2>&1; then
  pg_dump "$LOCAL_DB" \
    --table=Feature \
    --data-only \
    --column-inserts \
    --no-owner \
    --no-acl \
    > "$BACKUP_DIR/features.sql" 2>/dev/null || echo -e "${YELLOW}‚ö†${NC} Nenhuma feature encontrada"
  echo -e "${GREEN}‚úì${NC} Features exportado"
else
  echo -e "${YELLOW}‚ö†${NC} Tabela Feature n√£o encontrada"
fi

# 4. Schema completo (sem dados)
echo "4. Exportando schema completo..."
pg_dump "$LOCAL_DB" \
  --schema-only \
  --no-owner \
  --no-acl \
  > "$BACKUP_DIR/schema.sql"
echo -e "${GREEN}‚úì${NC} Schema exportado"

# 5. Criar script de importa√ß√£o
cat > "$BACKUP_DIR/import.sh" << 'EOF'
#!/bin/bash

# Script para importar configura√ß√µes para banco de produ√ß√£o
# Uso: ./import.sh "postgresql://user:pass@host/db"

set -e

if [ -z "$1" ]; then
    echo "‚ùå Erro: DATABASE_URL n√£o fornecida"
    echo ""
    echo "Uso: ./import.sh \"postgresql://user:pass@host/db\""
    exit 1
fi

PROD_DB="$1"

echo "üîÑ Importando configura√ß√µes..."
echo ""

# Verificar conex√£o
if ! psql "$PROD_DB" -c "SELECT 1" > /dev/null 2>&1; then
    echo "‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de produ√ß√£o"
    exit 1
fi

echo "‚úì Conectado ao banco de produ√ß√£o"
echo ""

# Importar AdminSettings
echo "1. Importando AdminSettings..."
psql "$PROD_DB" < admin_settings.sql
echo "‚úì AdminSettings importado"

# Importar Plans
echo "2. Importando Plans..."
psql "$PROD_DB" < plans.sql
echo "‚úì Plans importado"

# Importar Features (se existir)
if [ -f "features.sql" ]; then
    echo "3. Importando Features..."
    psql "$PROD_DB" < features.sql 2>/dev/null || echo "‚ö† Erro ao importar features (pode ser normal)"
    echo "‚úì Features importado"
fi

echo ""
echo "‚úÖ Importa√ß√£o conclu√≠da!"
echo ""
echo "Pr√≥ximos passos:"
echo "1. Acesse seu app em produ√ß√£o"
echo "2. Fa√ßa Sign Up para criar primeiro usu√°rio"
echo "3. Verifique /admin/settings"
EOF

chmod +x "$BACKUP_DIR/import.sh"
echo -e "${GREEN}‚úì${NC} Script de importa√ß√£o criado"

# 6. Criar README
cat > "$BACKUP_DIR/README.md" << EOF
# Backup de Configura√ß√µes - $(date +%Y-%m-%d\ %H:%M:%S)

## Conte√∫do

Este backup cont√©m apenas as configura√ß√µes do Studio Lagosta:

- **admin_settings.sql** - Configura√ß√µes de custos de features
- **plans.sql** - Planos de billing
- **features.sql** - Features configuradas (se houver)
- **schema.sql** - Schema completo do banco (sem dados)
- **import.sh** - Script para importar para produ√ß√£o

## Como Usar

### 1. Aplicar schema ao banco de produ√ß√£o

\`\`\`bash
# Op√ß√£o A: Via Prisma (recomendado)
DATABASE_URL="postgresql://..." npx prisma db push

# Op√ß√£o B: Via dump de schema
psql "postgresql://..." < schema.sql
\`\`\`

### 2. Importar configura√ß√µes

\`\`\`bash
./import.sh "postgresql://user:pass@host/db"
\`\`\`

### 3. Verificar

\`\`\`bash
psql "postgresql://..." -c "SELECT * FROM \"Plan\";"
psql "postgresql://..." -c "SELECT * FROM \"AdminSettings\";"
\`\`\`

## ‚ö†Ô∏è Importante

- **N√ÉO** importe dados de User, Project, Template, Generation
- Esses devem ser recriados em produ√ß√£o via Clerk e interface
- Usu√°rios ser√£o criados automaticamente via webhook do Clerk

## Pr√≥ximos Passos

1. Deploy na Vercel
2. Configurar vari√°veis de ambiente
3. Aplicar schema (prisma db push)
4. Importar configura√ß√µes (se necess√°rio)
5. Sign up para criar primeiro usu√°rio
6. Configurar /admin/settings

Veja \`DEPLOY-DATABASE-MIGRATION.md\` para mais detalhes.
EOF

echo -e "${GREEN}‚úì${NC} README criado"
echo ""

# Resumo
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo -e "${GREEN}‚úÖ Backup conclu√≠do com sucesso!${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo "üì¶ Arquivos criados em: $BACKUP_DIR"
echo ""
ls -lh "$BACKUP_DIR"
echo ""
echo "üìñ Pr√≥ximos passos:"
echo "1. Leia: $BACKUP_DIR/README.md"
echo "2. Deploy na Vercel (veja DEPLOY-DATABASE-MIGRATION.md)"
echo "3. Execute: cd $BACKUP_DIR && ./import.sh \"postgresql://...\""
echo ""
