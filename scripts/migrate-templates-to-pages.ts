/**
 * Script de migra√ß√£o: Criar primeira p√°gina para templates existentes
 *
 * Este script cria uma p√°gina inicial para todos os templates que ainda n√£o t√™m p√°ginas.
 * Cada template deve ter pelo menos 1 p√°gina no novo sistema multi-p√°gina.
 *
 * Como executar:
 * npx tsx scripts/migrate-templates-to-pages.ts
 */

import { PrismaClient } from '../prisma/generated/client'

const db = new PrismaClient()

async function main() {
  console.log('üöÄ Iniciando migra√ß√£o de templates para sistema de p√°ginas...\n')

  try {
    // 1. Buscar todos os templates
    const templates = await db.template.findMany({
      select: {
        id: true,
        name: true,
        designData: true,
        Page: {
          select: {
            id: true,
          },
        },
      },
    })

    console.log(`üì¶ Total de templates encontrados: ${templates.length}\n`)

    let createdCount = 0
    let skippedCount = 0

    // 2. Para cada template, verificar se j√° tem p√°gina
    for (const template of templates) {
      if (template.Page && template.Page.length > 0) {
        console.log(`‚è≠Ô∏è  Template "${template.name}" (ID: ${template.id}) j√° tem ${template.Page.length} p√°gina(s). Pulando...`)
        skippedCount++
        continue
      }

      // 3. Extrair dados do designData
      const designData = template.designData as any
      const canvas = designData?.canvas || { width: 1080, height: 1920 }
      const layers = designData?.layers || []
      const backgroundColor = canvas.backgroundColor || '#ffffff'

      console.log(`‚ú® Criando p√°gina para template "${template.name}" (ID: ${template.id})...`)

      // 4. Criar primeira p√°gina
      await db.page.create({
        data: {
          name: 'P√°gina 1',
          width: canvas.width || 1080,
          height: canvas.height || 1920,
          layers: layers,
          background: backgroundColor,
          order: 0,
          templateId: template.id,
        },
      })

      createdCount++
      console.log(`‚úÖ P√°gina criada para template "${template.name}"\n`)
    }

    console.log('\nüìä Resumo da migra√ß√£o:')
    console.log(`   ‚úÖ P√°ginas criadas: ${createdCount}`)
    console.log(`   ‚è≠Ô∏è  Templates pulados (j√° tinham p√°ginas): ${skippedCount}`)
    console.log(`   üì¶ Total de templates processados: ${templates.length}`)
    console.log('\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!')

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error)
    process.exit(1)
  } finally {
    await db.$disconnect()
  }
}

main()
